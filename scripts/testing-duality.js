function Point(n,t){this.x=n,this.y=t}function Line(n,t,i){0==n?this.m=1/0:this.m=t/n,this.c=i.y-this.m*i.x,this.originPoint=i}function Box(n,t){this.width=n,this.height=t,this.boundaries=[new Line(1,0,new Point(0,this.height/2)),new Line(1,0,new Point(0,-this.height/2)),new Line(0,1,new Point(this.width/2,0)),new Line(0,1,new Point(-this.width/2,0))]}function HamSandwich(n,t){this.set1=n,this.set2=t}function mapCoordinate(n,t){return new Point((n-WIDTH/2)/SCALING,(HEIGHT/2-t)/SCALING)}function intersectWithBoundary(n){for(var t=[],i=0;i<boundaries.length;i++){var e=boundaries[i],o=n.intersectWithLine(e);o.inBoundary(-SCALED_WIDTH/2,-SCALED_HEIGHT/2,SCALED_WIDTH/2,SCALED_HEIGHT/2)&&t.push(convertPointToCanvasCoordinate(o))}return t}function convertPointToCanvasCoordinate(n){var t=SCALING*(n.x+SCALED_WIDTH/2),i=SCALING*(SCALED_HEIGHT/2-n.y);return new Point(t,i)}var ACCEPTABLE_ERROR=.001;Point.prototype.duality=function(){var n=new Line(1,this.x,new Point(0,-this.y));return n},Point.prototype.distanceFromPoint=function(n){var t=this.x-n.x,i=this.y-n.y;return Math.sqrt(Math.pow(t,2)+Math.pow(i,2))},Point.prototype.distanceFromOrigin=function(){return this.distanceFromPoint(new Point(0,0))},Point.prototype.inBoundary=function(n,t,i,e){return this.x>=n-ACCEPTABLE_ERROR&&this.x<=i+ACCEPTABLE_ERROR&&this.y>=t-ACCEPTABLE_ERROR&&this.y<=e+ACCEPTABLE_ERROR?!0:!1},Line.prototype.findPointOnLine=function(n){var t=new Point(n,void 0);return t.y=this.m*t.x+this.c,t},Line.prototype.isPointOnLine=function(n){return this.m==1/0?n.x==this.originPoint.x:this.findPointOnLine(n.x).y==n.y},Line.prototype.isPointAbove=function(n){return this.m==1/0?n.x<=this.originPoint.x:n.y>=this.findPointOnLine(n.x).y},Line.prototype.intersectWithLine=function(n){if(this.m==n.m)return null;var t;t=this.m==1/0||n.m==1/0?this.m==1/0?this.originPoint.x:n.originPoint.x:(this.c-n.c)/(n.m-this.m);var i=this.m*t+this.c;return new Point(t,i)},Box.prototype.intersectWithLine=function(n){for(var t=[],i=0;i<this.boundaries.length;i++){var e=this.boundaries[i],o=n.intersectWithLine(e);o.inBoundary(-this.width/2,-this.height/2,this.width/2,this.height/2)&&t.push(o)}return t},MIN_NUMBER=-65e3,MAX_NUMBER=65e3,HamSandwich.prototype.findMedian=function(n){for(var t=[],i=0;i<n.length;i++){var e=n[i].findPointOnLine(MIN_NUMBER);t.push(e)}t.sort(this.sortPointBy("y"));var o=t[Math.floor(n.length/2)];for(events=[o],i=0;i<n.length-1;i++)for(P=i+1;P<n.length;P++){var r=n[i].intersectWithLine(n[P]);events.push(r)}events.sort(this.sortPointBy("x"));for(var a,s=[],h=[],i=0;i<events.length;i++){for(var e=events[i],d=[],P=0;P<n.length;P++){var c=n[P],l=c.findPointOnLine(e.x);d.push(l)}d.sort(this.sortPointBy("y")),median=d[Math.floor(d.length/2)];for(var P=0;P<n.length;P++){var c=n[P];c.isPointOnLine(median)&&s.push(c)}s[s.length-1].isPointOnLine(e)&&(h.push(e),1==h.length&&(a=s[0]))}var u=s[0].findPointOnLine(MAX_NUMBER);return h.push(u),h},HamSandwich.prototype.findIntersection=function(n,t){for(index1=0,index2=0;index1<n.length-1&&index2<t.length-1;){if(startPoint1=n[index1],endPoint1=n[index1+1],startPoint2=t[index2],endPoint2=t[index2+1],line1=new Line(endPoint1.x-startPoint1.x,endPoint1.y-startPoint1.y,startPoint1),line2=new Line(endPoint2.x-startPoint2.x,endPoint2.y-startPoint2.y,startPoint2),intersection=line1.intersectWithLine(line2),null!=intersection&&(intersection.x-startPoint1.x)*(intersection.x-endPoint1.x)<=0&&(intersection.y-startPoint2.y)*(intersection.y-endPoint2.y)<=0)return intersection;n[index1+1].x>t[index2+1].x?index2++:index1++}},HamSandwich.prototype.sortPointBy=function(n){return function(t,i){return t[n]-i[n]}};var RADIUS=5,STOKE_WITDH=5,SCALING=30,normalPane=Snap("#normal-pane"),dualPane=Snap("#dual-pane"),HEIGHT=normalPane.node.offsetHeight,WIDTH=normalPane.node.offsetWidth,SCALED_HEIGHT=HEIGHT/SCALING,SCALED_WIDTH=WIDTH/SCALING,ham=new HamSandwich,medianLines=[[],[]],toggle={};$(document).ready(function(){$("#show-median").click(function(){for(var n=[[],[]],t=0;2>t;t++){var i=ham.findMedian(medianLines[t]);n[t]=i;for(var e=0;e<i.length;e++){var o=i[e];o=convertPointToCanvasCoordinate(o);var r=dualPane.circle(o.x,o.y,RADIUS);r.attr({fill:COLOR_PROFILE[t]}),r.addClass("color-"+t)}}var a=ham.findIntersection(n[0],n[1]),s=intersectWithBoundary(a.duality()),h=normalPane.line(s[0].x,s[0].y,s[1].x,s[1].y);h.attr({stroke:"#000"})}),$(".toggle-button").click(function(){var n=$(this).attr("id");toggle[n]?$("."+n).show():$("."+n).hide(),toggle[n]=!toggle[n]})});for(var papers=[normalPane,dualPane],i=0;i<papers.length;i++){var paper=papers[i],l=paper.line(0,HEIGHT/2,WIDTH,HEIGHT/2);l.attr({stroke:"#000"});var l2=paper.line(WIDTH/2,0,WIDTH/2,HEIGHT);l2.attr({stroke:"#000"})}var COLOR_PROFILE={0:"#FF0000",1:"#0000FF"},boundaries=[new Line(1,0,new Point(0,SCALED_HEIGHT/2)),new Line(1,0,new Point(0,-SCALED_HEIGHT/2)),new Line(0,1,new Point(SCALED_WIDTH/2,0)),new Line(0,1,new Point(-SCALED_WIDTH/2,0))],color=0;normalPane.click(function(n){var t=normalPane.circle(n.x,n.y,RADIUS),i=mapCoordinate(n.x,n.y),e=COLOR_PROFILE[color];t.attr({fill:e});var o=i.duality();medianLines[color].push(o);var r=intersectWithBoundary(o);line=dualPane.line(r[0].x,r[0].y,r[1].x,r[1].y),line.attr({stroke:e}),line.addClass("color-"+color),t.hover(function(){line.attr({strokeWidth:3})},function(){line.attr({strokeWidth:1})}),color=(color+1)%2});